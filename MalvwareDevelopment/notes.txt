Following the Udemy malDev course...

Download win10.ova from https://ln4.sync.com/dl/a67c3e0c0/ffdqygsf-cqxicvmb-3ki9ehrj-gcsfszkg/view/default/11890955400008


PE files:
    Portable executable
        Structure: headers + sections... => metadata + data (https://github.com/corkami/pics/blob/master/binary/pe101/README.md)

        use pe bear to load exe files and see that structure - most important things: .rtext, .rdata, .rsrc
        or use dumpbin in cli: $ dumpbin /headers c:\windows\system32\calc.exe 




    Generating exe vc dll:
        exe vs dynamic-link library 
        

        $ rundll32 implant.dll,RunME

        use Proces Hacker to see the running processes 


Droppers:

    Program that will deliver the payload to a victim

    can be javascript, powershell (or even .exe)

    Where to store the payload?
        1) .text - put the payload into main function (02.Payload_Storage/01.implant.text)
        2) .data - read only -> create a global variable holding the payload (02.Payload_Storage/01.implant.data)
        3) .rsrc - create a small file that holds the payload 
                    -> tell the compiler that theat file is the part of the resources section 
                    -> use specific API calls that extracts the payload (02.Payload_Storage/01.implant.rsrc)



Obfuscation and hiding:
    Why use it? 
        to hide from AV from binary maching / easy string patterns

    Encoders: Base64 (03.Payload_Encoding/implant.cpp)
        $ cartutil -encode calc.bin calc.b64 -> past that in unsigned char calc_payload[] = "" and get rid of '/n'
        Not enough to avoid detection - its too popular (use your own algorithm)

    Encryptions: AES, XOR
        XOR:  
            xorencrypt.py calc.bin -> copy the contents in payload
            
        AES:
            aesencrypt.py calc.bin -> copy the contents in payload and key 

    Function call Obfuscation:
        method of hiding DLLs or external functions - use GitModuleHandle and getProcAddress functions

            handle = GetmoduleHandle("sound.dll")
            GetProcAddress(handle, "PlaySound")

            lets get rid of dll functions in 05.Functions_Obfuscation/oldImplant.cpp
                and lets encrypt "VirtualProtect"
                c:\Python27\python.exe -i xorencrypt2.py
                >>> printC(xor("VirtualProtect", "ysgadlewneahOASUDNA"))
                { 0x2f, 0x1a, 0x15, 0x15, 0x11, 0xd, 0x9, 0x27, 0x1c, 0xa, 0x15, 0xd, 0x2c, 0x35 };

            to check that the program doesnot use virtualprotect
                $ c:\rto\tools\si\strings.exe -n 8 implant.exe | findstr /i "virtual"
